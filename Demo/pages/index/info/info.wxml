<view class = "contrainer">
    <!--标题-->
    <view class = "title">配置</view>

    <view class = "form-introduction">我们使用<text class = "code-text">app.json </text>文件来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</view>
    <view class = "form-introduction">以下是一个包含了所有配置选项的简单配置<text class = "code-text">app.json </text> ：</view>
    <!--代码块-->
    <view class = "code-block">
        <text>{{json[0]}}</text>
    </view>

    <!--小标题-->
    <view class = "child-title">app.json 配置项列表</view>
    <!--表格-->
    <view class = "form form-title">
        <view class = "form-item">属性</view>
        <view class = "form-item">类型</view>
        <view class = "form-item">必填</view>
        <view class = "form-item">描述</view>
    </view>
    <view class = "form form-content">
        <view class = "jump form-item" bindtap = "jump">Pages</view>
        <view class = "form-item">String Array</view>
        <view class = "form-item">是</view>
        <view class = "form-item">设置页面路径</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form form-content">
        <view class = "jump form-item" bindtap = "jump">window</view>
        <view class = "form-item">Object</view>
        <view class = "form-item">否</view>
        <view class = "form-item">设置默认页面的窗口表现</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form form-content">
        <view class = "jump form-item" bindtap = "jump">tabBar</view>
        <view class = "form-item">Object</view>
        <view class = "form-item">否</view>
        <view class = "form-item">设置底部 tab 的表现</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form form-content">
        <!--设置宽度了，但英文不会自动换行，中文就能自动换行-->
        <view class = "jump form-item" bindtap = "jump">network\nTimeout</view>
        <view class = "form-item">Object</view>
        <view class = "form-item">否</view>
        <view class = "form-item">设置网络超时时间</view>
    </view>
    <view class = "form-separateLine"></view>
    <view class = "form form-content">
        <view class = "jump form-item" bindtap = "jump">debug</view>
        <view class = "form-item">Boolean</view>
        <view class = "form-item">否</view>
        <view class = "form-item">设置是否开启 debug 模式</view>
    </view>
    <view class = "form-separateLine"></view>

    <!--小标题-->
    <view class = "child-title">pages</view>
    <!--介绍-->
    <view class = "form-introduction">接受一个数组，每一项都是字符串，来指定小程序由哪些页面组成。每一项代表对应页面的【路径+文件名】信息，<text class = "form-introduction blod">数组的第一项代表小程序的初始页面。小程序中新增/减少页面，都需要对 pages 数组进行修改。</text></view>
    <view class = "form-introduction">文件名不需要写文件后缀，因为框架会自动去寻找路径<text class = "code-text">.json </text>,<text class = "code-text">.js </text>,<text class = "code-text">.wxml </text>,<text class = "code-text">.wxss </text>的四个文件进行整合。</view>
    <view class = "form-introduction">如开发目录为：</view>

    <!--目录-->
    <view class = "catalogue-view">
        <view class = "catalogue-view-verical-line"></view>
        <view class = "catalogue-view-content">
            <view class = "catalogue-view-content-item">pages/</view>
            <view class = "catalogue-view-content-item">pages/index/index.wxml</view>
            <view class = "catalogue-view-content-item">pages/index/index.js</view>
            <view class = "catalogue-view-content-item">pages/index/index.wxss</view>
            <view class = "catalogue-view-content-item">pages/logs/logs.wxml</view>
            <view class = "catalogue-view-content-item">pages/logs/logs.js</view>
            <view class = "catalogue-view-content-item">app.js</view>
            <view class = "catalogue-view-content-item">app.json</view>
            <view class = "catalogue-view-content-item">app.wxss</view>
        </view>        
    </view>
    
    <view class = "form-introduction">则，我们需要在 app.json 中写</view>
    <!--代码块-->
    <view class = "code-block">
        <text>{{json[1]}}</text>
    </view>

    <view class = "child-title">window</view>
    <!--介绍-->
    <view class = "form-introduction">用于设置小程序的状态栏、导航条、标题、窗口背景色。</view>
    <!--表格-->
    <view class = "form form-title">
        <view class = "form-item">属性</view>
        <view class = "form-item">类型</view>
        <view class = "form-item">默认值</view>
        <view class = "form-item">描述</view>
    </view>
    <view class = "form form-content">
        <view class = "jump form-item" bindtap = "jump">navigationBar\nBackground\nColor</view>
        <view class = "form-item">HexColor</view>
        <view class = "form-item">#000000</view>
        <view class = "form-item">导航栏背景颜色，如"#000000"</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form form-content">
        <view class = "jump form-item" bindtap = "jump">navigationBar\nTextStyle</view>
        <view class = "form-item">String</view>
        <view class = "form-item">white</view>
        <view class = "form-item">导航栏标题颜色，仅支持 black/white</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form form-content">
        <view class = "jump form-item" bindtap = "jump">navigationBar\nTitleText</view>
        <view class = "form-item">String</view>
        <view class = "form-item">   </view>
        <view class = "form-item">导航栏标题文字内容</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form form-content">
        <!--设置宽度了，但英文不会自动换行，中文就能自动换行,通过\n手动换行,json 格式显示出来没有code标签，可以通过手动添加\n实现，但没有\t缩进效果-->
        <view class = "jump form-item" bindtap = "jump">background\nColor</view>
        <view class = "form-item">HexColor</view>
        <view class = "form-item">#ffffff</view>
        <view class = "form-item">窗口的背景色</view>
    </view>
    <view class = "form-separateLine"></view>
    <view class = "form-special form-content">
        <view class = "jump form-item" bindtap = "jump">background\nTextStyle</view>
        <view class = "form-item">String</view>
        <view class = "form-item">dark</view>
        <view class = "form-item">下拉背景字体、loading图的样式，仅支持dark/light</view>
    </view>
    <view class = "form-separateLine"></view>
    <view class = "form-special form-content">
        <view class = "jump form-item" bindtap = "jump">enable\nPullDown\nRefresh</view>
        <view class = "form-item">Boolean</view>
        <view class = "form-item">false</view>
        <view class = "form-item">是否开启下拉刷新，<text class = "jump" bindtap = "jump">详见页面相关事件处理函数</text>。</view>
    </view>
    <view class = "form-separateLine"></view>
    <!--注意-->
    <view class = "form-attention">注：HexColor（十六进制颜色值），如"#ff00ff"</view>
    <!--介绍-->
    <view class = "form-introduction">如 app.json ：</view>
    <!--代码块-->
    <view class = "code-block">
        <text>{{json[2]}}</text>
    </view>
    <!--图片介绍-->
    <view class = "introduction-image-view">
        <image class = "introduction-image-first" src="{{images[0]}}"></image>
    </view>

    <!--小标题-->
    <view class = "child-title">tabBar</view>
    <!--介绍-->
    <view class = "form-introduction">如果我们的小程序是一个多 tab 应用（客户端窗口的底部有tab栏可以切换页面），那么我们可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</view>
    <view class = "form-introduction">tabBar 是一个数组，<text class = "blod">只能配置最少2个、最多5个 tab</text>，tab 按数组的顺序排序。</view>
    <view class = "form-introduction blod">属性说明：</view>

    <!--表格-->
    <view class = "form form-title">
        <view class = "form-item">属性</view>
        <view class = "form-item">类型</view>
        <view class = "form-item">必填</view>
        <view class = "form-item">默认值</view>
        <view class = "form-item">描述</view>
    </view>
    <view class = "form form-content">
        <view class = "form-item">color</view>
        <view class = "form-item">HexColor</view>
        <view class = "form-item">是</view>
        <view class = "form-item">  </view>
        <view class = "form-item">tab 上的文字默认颜色</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form form-content">
        <view class = "form-item">selected\nColor</view>
        <view class = "form-item">HexColor</view>
        <view class = "form-item">是</view>
        <view class = "form-item">  </view>
        <view class = "form-item">tab 上的文字选中时的颜色</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form form-content">
        <view class = "form-item">back\nground\nColor</view>
        <view class = "form-item">HexColor</view>
        <view class = "form-item">是</view>
        <view class = "form-item">   </view>
        <view class = "form-item">	tab 的背景色</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form-special form-content">
        <!--设置宽度了，但英文不会自动换行，中文就能自动换行,通过\n手动换行,json 格式显示出来没有code标签，可以通过手动添加\n实现，但没有\t缩进效果-->
        <view class = "form-item">border\nStyle</view>
        <view class = "form-item">String</view>
        <view class = "form-item">是</view>
        <view class = "form-item">black</view>
        <view class = "form-item">tabbar上边框的颜色，仅支持black/white</view>
    </view>
    <view class = "form-separateLine"></view>
    <view class = "form-special form-content">
        <view class = "form-item">list</view>
        <view class = "form-item">Array</view>
        <view class = "form-item">是</view>
        <view class = "form-item">dark</view>
        <view class = "form-item">tab的列表,详见list属性说明,最少2个、最多5个tab</view>
    </view>
    <view class = "form-separateLine"></view>
    <view class = "form form-content">
        <view class = "form-item">position</view>
        <view class = "form-item">String</view>
        <view class = "form-item">是</view>
        <view class = "form-item">bottom</view>
        <view class = "form-item">可选值 bottom、top</view>
    </view>
    <view class = "form-separateLine"></view>


    <!--介绍-->
    <view class = "form-introduction">其中 list 接受一个数组，数组中的每个项都是一个对象，其属性值如下：</view>
    <!--表格-->
    <view class = "form form-title">
        <view class = "form-item">属性</view>
        <view class = "form-item">类型</view>
        <view class = "form-item">必填</view>
        <view class = "form-item">说明</view>
    </view>
    <view class = "form form-content">
        <view class = "form-item">pagePath</view>
        <view class = "form-item">String</view>
        <view class = "form-item">是</view>
        <view class = "form-item">页面路径，必须在 pages 中先定义</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form form-content">
        <view class = "form-item">text</view>
        <view class = "form-item">String</view>
        <view class = "form-item">是</view>
        <view class = "form-item">tab 上按钮文字</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form form-content">
        <view class = "form-item">iconPath</view>
        <view class = "form-item">String</view>
        <view class = "form-item">是</view>
        <view class = "form-item">图片路径，icon 大小限制为40kb</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form-special form-content">
        <!--设置宽度了，但英文不会自动换行，中文就能自动换行,通过\n手动换行,json 格式显示出来没有code标签，可以通过手动添加\n实现，但没有\t缩进效果-->
        <view class = "form-item">selected\nIconPath</view>
        <view class = "form-item">String</view>
        <view class = "form-item">是</view>
        <view class = "form-item">选中时的图片路径，icon 大小限制为40kb</view>
    </view>
    <view class = "form-separateLine"></view>

    
    <!--图片介绍-->
    <view class = "introduction-image-view">
        <image class = "introduction-image-second" src="{{images[1]}}"></image>
    </view>

    <!--小标题-->
    <view class = "child-title">networkTimeout</view>
    <!--介绍-->
    <view class = "form-introduction">可以设置各种网络请求的超时时间。</view>
    <view class = "form-introduction blod">属性说明：</view>

    <!--表格-->
    <view class = "form form-title">
        <view class = "form-item">属性</view>
        <view class = "form-item">类型</view>
        <view class = "form-item">必填</view>
        <view class = "form-item">说明</view>
    </view>
    <view class = "form form-content">
        <view class = "form-item">request</view>
        <view class = "form-item">Number</view>
        <view class = "form-item">否</view>
        <!--如果页间文本中使用嵌套，里面的标签不要使用view，view会默认换行，而text不会-->
        <view class = "form-item"><text class = "jump form-item" bindtap = "jump">wx.request</text>的超时时间，单位毫秒</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form-special form-content">
        <view class = "form-item">connect\nSocket</view>
        <view class = "form-item">Number</view>
        <view class = "form-item">否</view>
        <view class = "form-item"><text class = "jump form-item" bindtap = "jump">wx.connect\nSocket</text>的超时时间，单位毫秒</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form form-content">
        <view class = "form-item">upload\nFile</view>
        <view class = "form-item">Number</view>
        <view class = "form-item">否	</view>
        <view class = "form-item"><text class = "jump form-item" bindtap = "jump">wx.upload\nFile</text>的超时时间，单位毫秒</view>
    </view>
    <view class = "form-separateLine"></view> 
    <view class = "form form-content">
        <!--设置宽度了，但英文不会自动换行，中文就能自动换行,通过\n手动换行,json 格式显示出来没有code标签，可以通过手动添加\n实现，但没有\t缩进效果-->
        <view class = "form-item">download\nFile</view>
        <view class = "form-item">Number</view>
        <view class = "form-item">否</view>
        <view class = "form-item"><text class = "jump form-item" bindtap = "jump">wx.upload\nFile</text>的超时时间，单位毫秒</view>
    </view>
    <view class = "form-separateLine"></view>

    <!--小标题-->
    <view class = "child-title">debug</view>
    <!--介绍-->
    <view class = "form-introduction">可以在开发者工具中开启 debug 模式，在开发者工具的控制台面板，调试信息以 info 的形式给出，其信息有<text class = "code-text">Page的注册</text>，<text class = "code-text">页面路由</text>，<text class = "code-text">数据更新</text>，<text class = "code-text">事件触发</text> 。 可以帮助开发者快速定位一些常见的问题。</view>


    <!--小标题-->
    <view class = "child-title">page.json</view>
    <!--介绍-->
    <view class = "form-introduction">每一个小程序页面也可以使用<text class = "code-text">.json</text>文件来对本页面的窗口表现进行配置。 页面的配置比<text class = "code-text">app.json</text>全局配置简单得多，只是设置 app.json 中的 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。</view>
    <view class = "form-introduction blod">页面的<text class = "code-text">.json</text>只能设置<text class = "code-text">window</text>相关的配置项，以决定本页面的窗口表现，所以无需写<text class = "code-text">window</text>这个键，如：</view>

    <!--代码块-->
    <view class = "code-block">
        <text>{{json[2]}}</text>
    </view>
</view>

